import telebot
from telebot import types
import datetime

bot = telebot.TeleBot('7852694693:AAFiVgktRJT935uTNxwJi2Lr6J8oNAYMDUs')

GROUPS = {
    "–ò–ë-21": ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤", "–ë–æ—Ä–∏—Å–æ–≤–∞", "–í–∞—Å–∏–ª—å–µ–≤", "–ì—Ä–∏–≥–æ—Ä—å–µ–≤–∞"],
    "–ò–¢-22": ["–î–º–∏—Ç—Ä–∏–µ–≤", "–ï–≥–æ—Ä–æ–≤", "–ñ—É–∫–æ–≤–∞"],
    "–†–ü–û-23": ["–ó–∞–π—Ü–µ–≤–∞", "–ò–≤–∞–Ω–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤"]
}

SCHEDULE = {
    "–ò–ë-21": {
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [
            {"time": "9:00", "subject": "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è", "room": "101", "teacher": "–°–º–∏—Ä–Ω–æ–≤ –ê.–ê."},
            {"time": "11:00", "subject": "–°–µ—Ç–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "room": "205", "teacher": "–ü–µ—Ç—Ä–æ–≤ –ü.–ü."}
        ],
        "–í—Ç–æ—Ä–Ω–∏–∫": [
            {"time": "10:00", "subject": "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "room": "310", "teacher": "–ò–≤–∞–Ω–æ–≤–∞ –ò.–ò."}
        ]
    },
    "–ò–¢-22": {
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [
            {"time": "13:00", "subject": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "room": "412", "teacher": "–ö–æ–∑–ª–æ–≤ –ö.–ö."}
        ]
    }
}

TEACHERS = {
    "–°–º–∏—Ä–Ω–æ–≤ –ê.–ê.": {
        "subjects": ["–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"],
        "contacts": "smirnov@mospolytech.ru"
    },
    "–ü–µ—Ç—Ä–æ–≤ –ü.–ü.": {
        "subjects": ["–°–µ—Ç–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
        "contacts": "petrov@mospolytech.ru"
    }
}

SESSION_REQUIREMENTS = {
    "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è": [
        "–ó–∞—â–∏—Ç–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç (–≤—Å–µ 10)",
        "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω",
        "–î–æ–ø—É—Å–∫ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
    ],
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": [
        "–ó–∞—â–∏—Ç–∞ –∫—É—Ä—Å–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
        "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω"
    ]
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã (–≤ –ø–∞–º—è—Ç–∏)
user_data = {}


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üë• –ú–æ—è –≥—Ä—É–ø–ø–∞')
    btn2 = types.KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    btn3 = types.KeyboardButton('üìö –°–µ—Å—Å–∏—è')
    btn4 = types.KeyboardButton('üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for group in GROUPS.keys():
        markup.add(types.KeyboardButton(group))

    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–æ—Å–ü–æ–ª–∏—Ç–µ—Ö–∞.\n"
                     "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É:",
                     reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
@bot.message_handler(func=lambda message: message.text in GROUPS.keys())
def set_group(message):
    user_data[message.chat.id] = {"group": message.text}
    bot.send_message(message.chat.id, f"–ì—Ä—É–ø–ø–∞ {message.text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    main_menu(message.chat.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è –≥—Ä—É–ø–ø–∞"
@bot.message_handler(func=lambda message: message.text == 'üë• –ú–æ—è –≥—Ä—É–ø–ø–∞')
def show_group(message):
    if message.chat.id in user_data:
        group = user_data[message.chat.id]["group"]
        students = "\n".join(GROUPS[group])
        bot.send_message(message.chat.id,
                         f"–ì—Ä—É–ø–ø–∞: {group}\n\n–°—Ç—É–¥–µ–Ω—Ç—ã:\n{students}")
    else:
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞! –ù–∞–∂–º–∏—Ç–µ /start")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@bot.message_handler(func=lambda message: message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def schedule_menu(message):
    if message.chat.id not in user_data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É!")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"))
    markup.add(types.InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="schedule_week"))
    markup.add(types.InlineKeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_'))
def handle_schedule(call):
    if call.message.chat.id not in user_data:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É!")
        return

    group = user_data[call.message.chat.id]["group"]
    day = datetime.datetime.now().strftime("%A")

    if call.data == "schedule_today":
        schedule = SCHEDULE[group].get(day, [])
        text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({day}):\n\n"
        for lesson in schedule:
            text += f"‚è∞ {lesson['time']} - {lesson['subject']}\n"
            text += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n"
            text += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n\n"

        if not schedule:
            text = "–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç! –û—Ç–¥—ã—Ö–∞–π—Ç–µ üòä"

    elif call.data == "schedule_week":
        text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        for day, lessons in SCHEDULE[group].items():
            text += f"üìå {day}:\n"
            for lesson in lessons:
                text += f"‚è∞ {lesson['time']} - {lesson['subject']}\n"
            text += "\n"

    elif call.data == "schedule_tomorrow":
        text = "–§—É–Ω–∫—Ü–∏—è '–ù–∞ –∑–∞–≤—Ç—Ä–∞' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†"

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–µ—Å—Å–∏—è"
@bot.message_handler(func=lambda message: message.text == 'üìö –°–µ—Å—Å–∏—è')
def session_menu(message):
    markup = types.InlineKeyboardMarkup()
    for subject in SESSION_REQUIREMENTS.keys():
        markup.add(types.InlineKeyboardButton(subject, callback_data=f"session_{subject}"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å–µ—Å—Å–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('session_'))
def handle_session(call):
    subject = call.data.split('_')[1]
    requirements = SESSION_REQUIREMENTS[subject]

    text = f"üìö –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}:\n\n"
    for i, req in enumerate(requirements, 1):
        text += f"{i}. {req}\n"

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"
@bot.message_handler(func=lambda message: message.text == 'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏')
def teachers_menu(message):
    markup = types.InlineKeyboardMarkup()
    for teacher in TEACHERS.keys():
        markup.add(types.InlineKeyboardButton(teacher, callback_data=f"teacher_{teacher}"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith('teacher_'))
def handle_teacher(call):
    teacher = call.data.split('_')[1]
    info = TEACHERS[teacher]

    text = f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
    text += f"üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã: {info['contacts']}\n\n"
    text += "–í–µ–¥—ë—Ç –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
    for subject in info['subjects']:
        text += f"- {subject}\n"

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –ú–æ—Å–ü–æ–ª–∏—Ç–µ—Ö–∞ –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
